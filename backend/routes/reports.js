const express = require('express');
const router = express.Router();
const multer = require('multer');
const { auth } = require('../middleware/auth');
const emailService = require('../services/emailService');

// Configure multer for handling file uploads
const storage = multer.memoryStorage();
const upload = multer({ 
  storage: storage,
  limits: {
    fileSize: 10 * 1024 * 1024 // 10MB limit
  },
  fileFilter: (req, file, cb) => {
    if (file.mimetype === 'application/pdf') {
      cb(null, true);
    } else {
      cb(new Error('Only PDF files are allowed'), false);
    }
  }
});

// Send PDF report via email
router.post('/send-pdf', auth, upload.single('pdfFile'), async (req, res) => {
  console.log('📨 Received PDF report request');
  console.log('📄 File received:', !!req.file);
  console.log('📋 Metadata received:', !!req.body.reportMetadata);
  
  try {
    const { reportMetadata } = req.body;
    
    if (!req.file) {
      console.log('❌ No PDF file provided');
      return res.status(400).json({
        success: false,
        message: 'PDF file is required'
      });
    }

    if (!reportMetadata) {
      console.log('❌ No report metadata provided');
      return res.status(400).json({
        success: false,
        message: 'Report metadata is required'
      });
    }

    const metadata = JSON.parse(reportMetadata);
    const reportData = metadata.reportData || [];
    
    console.log('✅ Parsed metadata, report data entries:', reportData.length);
    
    // Demo email address
    const demoEmail = 'itzrvm2337@gmail.com';
    
    console.log('📧 Sending email to:', demoEmail);
    
    // Send PDF report
    const emailSent = await emailService.sendPDFReport(
      demoEmail,
      reportData,
      metadata,
      req.file.buffer
    );

    if (emailSent) {
      res.json({
        success: true,
        message: `PDF report sent successfully to ${demoEmail}`,
        timestamp: new Date().toISOString()
      });
    } else {
      res.status(500).json({
        success: false,
        message: 'Failed to send PDF report'
      });
    }

  } catch (error) {
    console.error('Error sending PDF report:', error);
    res.status(500).json({
      success: false,
      message: 'Internal server error while sending PDF report'
    });
  }
});

// Test email functionality
router.post('/test-email', auth, async (req, res) => {
  try {
    console.log('🧪 Testing email functionality...');
    
    const testEmail = await emailService.sendAlert(
      'itzrvm2337@gmail.com',
      'Test Email from PowerAI',
      'This is a test email to verify email functionality is working correctly.',
      'Test System'
    );

    if (testEmail) {
      res.json({
        success: true,
        message: 'Test email sent successfully to itzrvm2337@gmail.com'
      });
    } else {
      res.status(500).json({
        success: false,
        message: 'Failed to send test email'
      });
    }

  } catch (error) {
    console.error('Error sending test email:', error);
    res.status(500).json({
      success: false,
      message: 'Internal server error while sending test email'
    });
  }
});

// Send simple report data via email (without PDF attachment)
router.post('/send-data', auth, async (req, res) => {
  try {
    const { reportData, metadata } = req.body;
    
    if (!reportData || !metadata) {
      return res.status(400).json({
        success: false,
        message: 'Report data and metadata are required'
      });
    }

    const demoEmail = 'itzrvm2337@gmail.com';
    
    // Generate simple text report
    const totalUsage = reportData.reduce((sum, item) => sum + (item.usage || 0), 0);
    const totalCost = reportData.reduce((sum, item) => sum + (item.cost || 0), 0);
    const deviceCount = new Set(reportData.map(item => item.deviceId)).size;
    
    const { reportType, startDate, endDate, selectedDate } = metadata;
    let dateRange = '';
    
    if (reportType === 'specific') {
      dateRange = new Date(selectedDate).toLocaleDateString();
    } else if (reportType === 'range') {
      dateRange = `${new Date(startDate).toLocaleDateString()} - ${new Date(endDate).toLocaleDateString()}`;
    } else {
      dateRange = reportType.charAt(0).toUpperCase() + reportType.slice(1);
    }

    const reportText = `
Energy Report Summary
Period: ${dateRange}
Generated: ${new Date().toLocaleString()}

Summary Statistics:
- Total Devices: ${deviceCount}
- Total Energy Usage: ${totalUsage.toFixed(2)} kWh
- Total Cost: $${totalCost.toFixed(2)}
- Data Points: ${reportData.length}
- Average Daily Usage: ${(totalUsage / Math.max(1, new Set(reportData.map(item => item.date)).size)).toFixed(2)} kWh

This report was generated by PowerAI IoT Management System.
    `;

    const emailSent = await emailService.sendAlert(
      demoEmail,
      `⚡ Energy Report Summary - ${dateRange}`,
      reportText,
      'Energy Report System'
    );

    if (emailSent) {
      res.json({
        success: true,
        message: `Report summary sent successfully to ${demoEmail}`,
        timestamp: new Date().toISOString()
      });
    } else {
      res.status(500).json({
        success: false,
        message: 'Failed to send report summary'
      });
    }

  } catch (error) {
    console.error('Error sending report data:', error);
    res.status(500).json({
      success: false,
      message: 'Internal server error while sending report'
    });
  }
});

module.exports = router;